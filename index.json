[
{
	"uri": "https://gwtharg.github.io/28mm/paas/openshift/openshift/",
	"title": "OpenShift Container Platform",
	"tags": ["docker", "openshift", "kubernetes"],
	"description": "",
	"content": "Openshift is a Platform as a Service (PaaS) technology from Redhat based on Docker and Kubernetes.\nOpenshift provides the ability to orchistrate docker containers, providing request routing, health checks and automated scaling amongst other things.\nArchitecture Openshift is made up of multiple components that together orchestrate containers and allow them to talk to one another. There are multiple PaaS\u0026rsquo; deployed within the bank each with it\u0026rsquo;s own purpose.\n   PaaS Name Purpose     Non Production This PaaS is used for running the non production workloads, this will be where development and test purposes are deployed.   Production This PaaS is used to run production workloads which provide services to the customer.   Shared Services This PaaS is used to run the Operational Platform applications that are shared between Production and NonProduction PaaS\u0026rsquo;s. This is designed to run workloads that do not provide functionality to a customer but used to manage the Platform. This will run things like Composer, Kit CD services, Caboodle and Chieftain.    Openshift/Kubernetes Important Objects There are only a few important components that need to be understood to get started with Openshift.\nAll Openshift objects can be viewed and edited either in the UI or using the command line tool oc which is available from github.com (this will be packaged up eventually :-))\noc get ${object} will return the objects that you have access to.\nThis table provides a quick intro to some of the objects, further info can be found at the online documentation for Openshift and Kubernetes\n   Object oc get type (shortcut) Description     Project projects An area where a user can create and configure objects.   Namespace namespaces(ns) An extention of the project object, the namespace is a section of the SDN which is logically seperated from other namespaces.   Image Streams imagestreams (is) An object which is linked to a docker image deployed in the local docker registry of the PaaS. Other objects will refer to the imagestream rather than the docker images themselves. The image stream will track updates which can be used as a trigger for running deploys. Image streams also have tags similar to docker images (but they do not have to match the docker image tag)   Pod pods(po) A single deployable component which can be made up of 1 or more docker containers. This allows multiple docker containers to share a memory space, filesystem and network where there are tight dependencies.   Service services (svc) This is equivalent of a DNS entry and a load balancer when there are multiple instances of a pod running. This is only resolvable from containers running within the SDN of the PaaS.   Route routes This is the object that is used to configure the HA proxy\u0026rsquo;s when access is required to a service from outside of the PaaS.   Deployment Config deploymentconfigs(dc) Deployment configs are used to define how a docker image referenced by an imagestream should be deployed.   Replication Controllers replicationcontrollers(rc) A deployment config will create a replication controller rather than a pod. It is the replication controllers responsibility to create the pods, montior the health of the pods and start new pods if there are not enough pods running.   Persistent Volumes persistentvolumes(pv) These are filesystems which are shared amongst the nodes which can be mounted into a Pod when the docker container requests a Volume. This is a cluster level object whith various properties including size and write mode i.e. readWriteOnce(only a single instance of a pod can mount), readWriteMany(multiple instances of pods can mount), readOnly.   Persistent Volume Claim persistentvolumeclaims (pvc) These are used to allow a project to mark a persistent volume as used. A claim is really a request for a persistent volume which will then be matched and bound to a free volume. Each volume can only be bound to a single claim.    Whilst working on the PaaS it is possible to use a template to create multiple objects at a time. This is what elements relies on to do deploy applications to the Paas.\nUnderlying Fabric of the PaaS The PaaS is constructed with multiple types of physical servers. There are OpenShift Masters which are used to run the components used to manage the PaaS and OpenShift Nodes which are used to run the Pod workload.\n"
},
{
	"uri": "https://gwtharg.github.io/28mm/site_documentation/html_based_pages/",
	"title": "HTML Based Pages",
	"tags": ["html", "help"],
	"description": "",
	"content": "\n Trying colours You need to do this in html as markdown does not use colours by default.\n Some Markdown text with Simple blue coloured text.\nBack to normal text. Now we can highlight in red this is red.\n Below is the html for the colours    Some Markdown text with \u0026#x3C;span style=\u0026#x22;color:blue\u0026#x22;\u0026#x3E; Simple \u0026#x3C;b\u0026#x3E;blue\u0026#x3C;/b\u0026#x3E; coloured text.\u0026#x3C;br\u0026#x3E; \u0026#x3C;/span\u0026#x3E;Back to normal text. Now we can highlight in \u0026#x3C;span style=\u0026#x22;color:red\u0026#x22;\u0026#x3E; \u0026#x3C;b\u0026#x3E;red\u0026#x3C;/b\u0026#x3E; this is red.\u0026#x3C;/span\u0026#x3E;\u0026#x3C;br\u0026#x3E;    Remember to use HTML entities so the HTML is not interpreted as HTML"
},
{
	"uri": "https://gwtharg.github.io/28mm/paas/pe_background/",
	"title": "Platform Engineering Background",
	"tags": ["openshift", "html"],
	"description": "",
	"content": "\n \u0026nbsp;\nSome Background When the Platform Engineering team was formed there were a number of different processes in place for requesting work from the team. These included:\nProcess/MethodType of requestREAP Process / EPM\nPlanned project requests - Low detail and uncertain timingsEmailsUnplanned requests\nService Requests\nIncidents\nOCSMS Teams / HipchatWalkupService NowService Requests\nIncident Records\nProblem Records\nJiraPlanned Requests\nUnplanned Requests\nIncidents\nRTCIncidents\nUnplanned Requests\nSharepointUnplanned RequestsMeeting RequestsActions - should be plannedEscalationsUnplanned RequestsFollowing a review of the above the following requirements were captured:\nWhat is the team doing?How do we create headroom for the team?Minimise time spent managing work requestsClear prioritisation of tasks processHave good data about the work the team does to help decision makingPrimary tasks is to:\nRationalise work requests systems with defined SLAs\u0026nbsp;\n  "
},
{
	"uri": "https://gwtharg.github.io/28mm/git/branchingstrategy/",
	"title": "Branching and Merging Strategy",
	"tags": ["git"],
	"description": "",
	"content": "Most development is done on the internal Github but some code is shared with the external Bitbucket. In order to support this we have the same repo pushed to both GitHub and BitBucket.\nIt is best to consider GitHub and BitBucket as simply copies of the same git repository. There is no merging between GitHub and BitBucket, merging is done at the branch level and the same commit history is pushed to both systems.\nThere are slightly different strategies depending on what we are modifying.\nCommon Libraries Common libraries are strongly synchronised. All work for PaaS is done on a 2.0 branch and whenever a change is made on bitbucket/2.0 is must also be pushed to github/2.0 or vice versa.\nAs required the latest DYB changes on bitbucket/master branch will be merged into bitbucket/2.0 and pushed to github/2.0.\nNew Microservices This is the simplest scenario where a new repo is created on Github and development continues on github/master.\nOn a regular basis github/master is pushed to bitbucket/master so that in theory work could be done by people not on the network.\nExisting Microservices Initially bitbucket/master is pushed to github/master and a bitbucket/2.0 marker branch is created pointing to the same commit. Migration then continues on github/master.\nPeriodically we will have to synchronise any changes that have been made by DYB which involves merging bitbucket/master into github/master. The bitbucket/2.0 marker is moved to point to the merge commit and is pushed back to bitbucket.\nNote: Be very careful not to merge any PaaS work back into bitbucket/master since that belongs to DYB.\nAlexa - ScreenMedia ScreenMedia have their own git workflow and will periodically raise a pull request to merge their development branch into bitbucket/master. When this is merged it is pushed to github/master so that it can be built and deployed to the PaaS.\nNote: Since they are using a different workflow which uses a long lived development branch you should NOT delete their branch when merging. For the same reason do not rewrite history by rebasing or squashing during the merge, stick with standard merges.\n"
},
{
	"uri": "https://gwtharg.github.io/28mm/site_documentation/flowcharts/",
	"title": "Flowcharts Notes",
	"tags": ["help", "mermaid", "shortcodes"],
	"description": "",
	"content": "Here are some mermaid diagrams using shortcodes {{ \u0026lt; mermaid \u0026gt;}} graph LR; A[Hard edge] --\u0026gt;|Link text| B(Round edge) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result one] C --\u0026gt;|Two| E[Result two] {{ \u0026lt; /mermaid \u0026gt;}}  graph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two]  Gantt Diagrams {{ \u0026lt; mermaid \u0026gt;}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2020-01-06,2020-01-08 Active task :active, des2, 2020-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2020-01-06,24h Implement parser and json :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{ \u0026lt; /mermaid \u0026gt;}}  gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2020-01-06,2020-01-08 Active task :active, des2, 2020-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2020-01-06,24h Implement parser and json :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d  Class Diagrams {{ \u0026lt; mermaid \u0026gt;}} classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u0026lt;--\u0026gt; C2: Cool label {{ \u0026lt; /mermaid \u0026gt;}}  classDiagram Class01 C2 : Where am i? Class09 --* C3 Class09 --| Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08  C2: Cool label  Git Graphs {{ \u0026lt; mermaid \u0026gt;}} gitGraph: options { \u0026quot;nodeSpacing\u0026quot;: 60, \u0026quot;nodeRadius\u0026quot;: 8 } end commit branch walmo checkout walmo commit commit checkout master commit commit merge walmo {{ \u0026lt; /mermaid \u0026gt;}}  gitGraph: options { \"nodeSpacing\": 60, \"nodeRadius\": 8 } end commit branch walmo checkout walmo commit commit checkout master commit commit merge walmo  Single Line {{ \u0026lt; mermaid \u0026gt;}} graph LR; HTML--\u0026gt;Hugo; {{ \u0026lt; /mermaid \u0026gt;}}  graph LR; HTML--Hugo;  Adding Comments {{ \u0026lt; mermaid \u0026gt;}} graph TD A[Client] --\u0026gt;|tcp_443 \u0026amp; tcp_8080| B(F5 Load Balancer) B --\u0026gt;|tcp_443| C[Live Server] B --\u0026gt;|tcp_443| D[Live Server] {{ \u0026lt; /mermaid \u0026gt;}}  graph TD A[Client] --|tcp_443 \u0026 tcp_8080| B(F5 Load Balancer) B --|tcp_443| C[Live Server] B --|tcp_443| D[Live Server]  TB Diagram {{ \u0026lt; mermaid \u0026gt;}} graph TB c1--\u0026gt;a2 subgraph one a1--\u0026gt;a2 end subgraph two b1--\u0026gt;b2 end subgraph three c1--\u0026gt;c2 end {{ \u0026lt; /mermaid \u0026gt;}}  graph TB c1--a2 subgraph one a1--a2 end subgraph two b1--b2 end subgraph three c1--c2 end  Colours with style {{ \u0026lt; mermaid \u0026gt;}} id1(Start)--\u0026gt;id2(Stop) style id1 fill:#f00,stroke:#333,stroke-width:4px style id2 fill:#0f0,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5, 5 {{ \u0026lt; /mermaid \u0026gt;}}  graph LR id1(Start)--id2(Stop) style id1 fill:#f00,stroke:#333,stroke-width:4px style id2 fill:#0f0,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5, 5  Circles {{ \u0026lt; mermaid \u0026gt;}} graph LR id1((Drawing a circle)) {{ \u0026lt; /mermaid \u0026gt;}}  graph LR id1((Drawing a circle))  "
},
{
	"uri": "https://gwtharg.github.io/28mm/site_documentation/markdown_notes/",
	"title": "Markdown Notes",
	"tags": ["markdown", "help"],
	"description": "",
	"content": "Tables You can create tables by assembling a list of words and dividing them with hyphens - (for the first row), and then separating each column with a pipe |:\nso this\n First Header | Second Header ------------ | ------------- Content from cell 1 | Content from cell 2 Content in the first column | Content in the second column Renders as this\n   First Header Second Header     Content from cell 1 Content from cell 2   Content in the first column Content in the second column    Headers # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 H1 H2 H3 H4 H5 H6 Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with **asterisks** or __underscores__. Strong emphasis, aka bold, with asterisks or underscores.\nStrikethrough uses two tildes. ~~Scratch this.~~ Strikethrough uses two tildes. Scratch this.\nOrdered Lists (In this example, leading and trailing spaces are shown with with dots: ⋅)\n1. First ordered list item 2. Another item 1. Actual numbers don't matter, just that it's a number 4. And another item.  First ordered list item Another item Actual numbers don\u0026rsquo;t matter, just that it\u0026rsquo;s a number And another item.  Unordered Lists To create an unordered list, add dashes (-), asterisks (*), or plus signs (+) in front of line items. Indent one or more items to create a nested list.\n* First item * * Second item * * Third item * * Fourth item * - First item - - Second item - - Third item - - Indent 1 `tab then -` - Indent 2 `tab then -` - Fourth item - + First item + + Second item + + Third item + + Fourth item +  First item * Second item * Third item * Fourth item *   First item - Second item - Third item -  Indent 1 tab then - Indent 2 Tab then -   Fourth item -   First item + Second item + Third item + Fourth item +  Lists with Tick boxes - [x] First item - [ ] Second item - [ ] Third item  First item Second item Third item  Line Breaks To create a line break \u0026lt;br\u0026gt;, end a line with two or more spaces, and then type return.\n So this would be a very long line that could with a line break now. [this is where the return was after two spaces] Now we have another line which will be after the line break. So this would be a very long line that could with a line break now. Now we have another line which will be after the line break.\nBlockquotes To create a blockquote, add a \u0026gt; in front of a paragraph.\n\u0026gt; So we should see this text in a block quote.  So we should see this text in a block quote.\n Horizontal Rules To create a horizontal rule, use three or more asterisks (***), dashes (\u0026mdash;), or underscores (___) on a line by themselves.\n*** --- ___    Links with names To create a link, enclose the link text in brackets (e.g., [Duck Duck Go]) and then follow it immediately with the URL in parentheses (e.g., (https://duckduckgo.com)).\nA better search engine would be [Duck Duck Go](https://duckduckgo.com) A better search engine would be Duck Duck Go\nRaw Links and Email Addresses To create a link or an email link , enclose the link text in angled brackets\nhttps://duckduckgo.com or yourname@home.com\n\u0026lt;https://duckduckgo.com\u0026gt; or \u0026lt;yourname@home.com\u0026gt; "
},
{
	"uri": "https://gwtharg.github.io/28mm/site_documentation/wall/wall/",
	"title": "PDF Convert Test",
	"tags": ["help"],
	"description": "",
	"content": "Awful way of doing this - do not recommend PDF converted to docx [calibre] then pandoc to md file. All images needed html options removed and repointing. So this is an image jpeg Then we have png files Wall fixings for hollow surfaces\nFixings for hollow structures (walls,ceilings and doors etc.) and how to use them\nWhen fixing onto any surface the strength of the fixing is always dependent upon the strength of the actual surface, with hollow surfaces this is generally less than for a solid structure. It is always best with hollow surfaces to try to locate and fix into one of the support members.\nThis is not always possible and it is sometimes necessary to actually secure onto the covering, be it plaster board, hardboard or whatever.\nWhen drilling relatively thin, soft materials it is not necessary or desirable to use hammer action if a power drill is used.\nBefore drilling into any void, check for possible concealed pipes and electric wiring.\nRubber-sleeved fixing with captured insert As the screw is tightened into the rubber sleeve inserted through the wallboard, the sleeve is compressed against the reverse side of wall. The screw can be removed/replaced if required, the fixing will remain in place through the wall.\nAfter the required hole is drilled, the rubber sleeve is inserted through the covering; the sleeve needs to be a fairly tight fit through the hole to ensure that it does not rotate when the screw is tightened. The screw is then inserted through the workpiece and into a tapped insert, which is moulded into the back end of the sleeve.\nThe sleeve has a small rim which stands proud of the outer surface, to allow the workpiece to sit flat against the surface, the back of the workpiece should be relieved around the hole.\nVarious sizes are available; the screws are supplied with the fitting although longer screws of the appropriate diameter/thread can be used where the workpiece is too thick for the screw supplied.\nPlastic collapsible fixing\nVery similar to the above fixing but using an ordinary wood screw. The fixing is used in the same manner as the above but they tend to stand up less well to repeated screw removal/replacement as the screw tends to cut a new thread each time it is inserted.\nPlastic spread fixing\nAn inexpensive fixing which is not reusable - removal of the screw will result in the fixing dropping down the cavity.\nDrill a hole just large enough to take the head of the fixing.\nAn ordinary wood screw of the appropriate length (at least equal to the thickness of the workpiece plus the thickness of wallboard plus the length of the fixing), is inserted through the workpiece and into the fixing by about 2 or 3 turns. The fixing is then pushed through the hole in the wallboard. As the fixing is pushed through, the 'legs' of the fixing are compressed and they spring out once the fixing is through the board.\nThe workpiece needs to be pulled away from the front surface so that the legs of the fixings bear on the reverse side of the wall as the screw is tightened.\nVarious sizes are available to suit various diameters of wood screw.\nSpring metal toggle fixing\nThese fixings tend to give a stronger anchor than the plastic types above as they spread the load over a larger area on the reverse side of wallboard. The fixing consists of two spring-loaded metal arms with a thread tapped into the hinge pivot. The two arms are held against the screw as the fixing is inserted through the pre-drilled hole and then spring out to spread the load on the reverse side of the wallboard. The fixings cannot be reused - removal of the screw will result in the fixing dropping down the cavity.\nDrill a hole just large enough to allow the toggle to be pushed through with its spring-loaded arms held together.\nPass the fixing screw through the workpiece into toggle. Push the toggle through the hole until the arms spring out, pull the workpiece away from the front surface (so that the arms bear against the reverse side of the wallboard) and tighten the screw.\nVarious sizes are available; the screws are supplied with the fitting although longer screws of the appropriate diameter/thread can be used where the workpiece is too thick for the screw supplied.\nGravity metal toggle fixing\nThese fixings are similar to the spring type above except that the toggle is made in one piece which is passed through the hole and then drops down under gravity to be parallel to a vertical wallboard. These fixings can only be used when fixing to vertical surfaces. The fixings cannot be reused - removal of the screw will result in the toggle dropping down the cavity.\nDrill hole just big enough to allow the toggle to be passed through when the toggle is parallel to the fixing screw.\nPass the fixing screw through the workpiece into toggle. Push the toggle through the hole until it turns within the cavity, pull the workpiece away from the front surface (so that the toggles bear against the reverse side of the wallboard) and tighten the screw.\nVarious sizes are available; the screws are supplied with the fitting although longer screws of the appropriate diameter/thread can be used where the workpiece is too thick for the screw supplied.\nWall fixings for solid surfaces\nFixing into solid brick, block or concrete When you need a fixing into brick, block or concrete, you need to be confident that it will be strong enough for the application - the easiest way to be confident is to use the correct type of insert with the correct size of drill and screw.\nAlthough often referred to as 'wall' fixings, they are equally suitable for fixing into floors or concrete beams.\nPlugs for screws:\nGeneral.\nAll the plugs described below for use in solid surfaces are designed for use with ordinary wood screws. Each basic type of plug is available in a range of sizes to suit specific screw diameters and often for specific length of screw. To ensure maximum strength when using a particular type and size of plug, always follow the manufacturers recommendations regarding the drill size and the length/size of screw.\nGenerally it does not matter what material the screw is made from or the type of screw head, but when selecting the type of screw to use, think about the position and environment in which it will be used. If the screw head will be exposed, consider a brass or chrome finish, if the screw will be used in a damp area, avoid steel or other materials which will corrode.\nDrilling\nAll the plugs detailed require a hole to be drilled in the brick, block or concrete before the plug can be used. Often on internal walls, the material will be covered with a relatively thin coating of render and/or plaster.\nBefore drilling into any surface, check for possible concealed pipes and electric wiring.\nTo ensure that the drill bit has a long and happy life, a tungsten-carbide masonry drill bit should be used. The effort required to drill the hole depends a lot upon the material being drilled:\nBrick:\nBrick is basically baked clay, and a good quality brick will be free of both internal voids and internal pieces of flint, stone or other 'non-clay' material. While the hardness of bricks will vary, they can normally be drilled accurately and cleanly. You may need to use a power drill with a hammer action on bricks that are very hard.\nBlock:\nBlock material can vary considerably from the ultra-soft lightweight/thermal blocks to the concrete block containing large pieces of very hard flint etc.\nLightweight blocks can be drilled very easily using a hand-brace or a power drill without hammer action. A risk with these blocks is that they are not very\n'forgiving', a small amount of pressure in the wrong direction and the drill bit will be away where you never intended it to go.\nAt the other end of the block materials, is the concrete block - these can vary greatly in hardness and the cleanness of the final hole. Concrete can vary both between different areas of the same block and between blocks from different manufacturers. A drilled hole tends not to be as clean as in brick and there is always a danger that the drill bit will hit a piece of hard material causing the bit to wonder off the intended line.\nEven when no large pieces of hard material is encountered, the drill bit will often remove smaller pieces of grit which will unintentionally enlarge the drilled hole. A hammer action power drill is generally required.\nConcrete:\nCast concrete is different from the block version in that the material is less 'grainy' with the particles more firmly bonded together. Like the block material, when drilling into cast concrete, large or small pieces of hard flint etc. may be encountered, causing the drill bit to wonder off line, prevent drilling to an increased depth or producing a ragged hole.\nMost plugs need to be a push fit into the drilled hole, if the hole is undersize, hammering the plug into the hole may damage the plug and/or make it impossible to drive the screw home in the correct manner. Too large a hole may make it difficult to drive the screw home (the plug may turn in the hole as the screw is turned) or provide reduced strength when the screw has been tightened.\nPlastic plugs\nThese are available in a variety of lengths and for a variety of screw sizes. The interior of the plugs will usually be designed so that when a screw is fully inserted the end of the plug furthest from the surface expands the greatest.\nDrill hole to the same depth as the wall plug. Push the plug into the hole, insert the screw through the workpiece into the plug and tighten.\nPlastic 'plug sticks'\nPlug sticks are sold as lengths (12 in/300mm) of a uniform cross section along the whole length. Different diameter sticks are available for different screw sizes - the different diameters are normally made with differing material colours for easy identification. It is only necessary to cut off the appropriate length after the hole has been drilled and insert the length of stick into the hole. Although convenient, the sticks do not give as firm a fixing as the plugs because of their uniform cross-section.\nFibre plugs\nFibre plugs are often though of as old-fashioned however they still have a use today. One of their advantages over plastic is that screw can be removed/replaced a number of times without having to replace the plug. There also tend to stand up to high temperatures better than plastic. Fibre plugs are available in a number of lengths and diameter; they are of a uniform cross-section along the length so can be cut down to size if necessary. The plug should be as long as the threaded part of screw.\nDrill the hole and insert the plug to just below the wall surface. Insert the screw through the workpiece and turn the screw into the plug until the plug starts to bind in the hole and then\nwithdraw it so that the top of the plug is in ilne with the surface. The plug expands to\nfit the hole tightly as the screw is driven home.\nRibbed barrel plugs\nRibbed barrel give a really tight fit. Each plug will take a range of screw sizes and a choice of lengths is available.\nDrill hole slightly deeper than wall plug being used. Push the plug into the hole, insert the screw through the workpiece into the plug and tighten.\nSoft materials, such as lightweight block\nBecause lightweight block is a very soft substance, special plugs are required. These plugs tend to be like ordinary wall plugs but with helical wings around the barrel. The helical wings grip the sides of hole. As the screw is tightened, the wings cut further into the block giving a very strong fixing.\nDrill the hole the same diameter as the plug barrel. The overall diameter of the plug will be about twice the diameter of the barrel, and the plug will need to be hammered into the wall so that the wings cut into the sides of the hole. Slip the screw through the workpiece into the plug and\ntighten.\nBolts and nuts metal wall inserts\nThese can offer a stronger and more temperature resistance fixing than plastic or fibre plugs.\nThe anchoring part of the insert comprises a number of metal segments which are forced into the side of the hole by a cone which is pulled forward into the segments by the bolt or nut being tightened. Tightening the nut or bolt pulls the cone into the segments but it also tends to force the insert out of the wall if it is not held in position until the segments begin to bite into the wall of the hole. The nuts/bolts can be removed/replaced numerous times, the only risk is that the wall material may be weakened by repeated application of the securing pressure.\nProjecting type have an external screw thread which projects from the insert. Different lengths of thread are available (from 12mm to over 75mm) to allow for different thicknesses of workpieces. The hole in the surface only needs to be as deep as the actual insert itself.\nHaving drilled the hole just large enough for the insert, push the insert into the hole, position the workpiece over the thread, put on the washer and nut. Keeping the workpiece against the surface (to ensure the insert is not pulled from the hole) tighten the nut - any excess thread may be sawn off.\nBolt type inserts incorporate a thread in the cone and a bolt is inserted from the wall surface, different lengths of bolt are available for workpieces of different thicknesses. The hole in the wall needs to be deep enough to ensure that the bolt does not bottom when it is fully tightened.\nHaving drilled the hole just large enough for the insert (but deep enough for the tightened bolt), push the insert just into the hole, put the bolt through a washer and the workpiece, offer up the workpiece and engage the bolt into the threaded cone at the back of the insert. Keeping the workpiece against the surface (to ensure the insert is not pulled from the hole) tighten the bolt.\n"
},
{
	"uri": "https://gwtharg.github.io/28mm/git/",
	"title": "GIT Info",
	"tags": ["git"],
	"description": "",
	"content": "Test from GIT information Based on notes from old V: Drive from hVM\n Tags based on Git\n"
},
{
	"uri": "https://gwtharg.github.io/28mm/",
	"title": "Auto-Doc",
	"tags": [""],
	"description": "",
	"content": "Auto-Doc Sample Front Matter Hugo Front Matter is the sites Metadata\n--- title: \u0026#34;You Title goes here\u0026#34; date: 2020-04-13T17:36:16+01:00 draft: true tags: [ \u0026#34;if required\u0026#34; ] categories: [ \u0026#34;Your category here\u0026#34; ] components: [\u0026#34;Jira aligned component\u0026#34;] authors: [\u0026#34;name of document owner\u0026#34;] --- "
},
{
	"uri": "https://gwtharg.github.io/28mm/paas/",
	"title": "Paas",
	"tags": ["openshift"],
	"description": "",
	"content": "Pages Training Notes  Openshift Platform Engineering Background  "
},
{
	"uri": "https://gwtharg.github.io/28mm/tfs/",
	"title": "TFS Info",
	"tags": [""],
	"description": "",
	"content": "Chapter Basic info Introduction to TFS Based on test notes\n"
},
{
	"uri": "https://gwtharg.github.io/28mm/authors/",
	"title": "Authors",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/tags/embed/",
	"title": "embed",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/tags/pdf/",
	"title": "pdf",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/site_documentation/pdf_image/",
	"title": "PDF Image Test",
	"tags": ["pdf", "embed"],
	"description": "",
	"content": "  Or we just embed the PDF and point to folder  The href is from localhost in this test   \u0026#x3C;object data=\u0026#x22;/28mm/site_documentation/image/twd.pdf\u0026#x22; type=\u0026#x22;application/pdf\u0026#x22; width=\u0026#x22;800px\u0026#x22; height=\u0026#x22;834px\u0026#x22;\u0026#x3E; \u0026#x3C;embed src=\u0026#x22;/28mm/site_documentation/image/twd.pdf\u0026#x22;\u0026#x3E; \u0026#x3C;p\u0026#x3E;This browser does not support PDFs. Please download the PDF to view it: \u0026#x3C;a href=\u0026#x22;http://localhost/28mm/wall/wall/magic.pdf\u0026#x22;\u0026#x3E;Download PDF\u0026#x3C;/a\u0026#x3E;.\u0026#x3C;/p\u0026#x3E; \u0026#x3C;/embed\u0026#x3E; \u0026#x3C;/object\u0026#x3E;   This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n  "
},
{
	"uri": "https://gwtharg.github.io/28mm/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/authors/walmo/",
	"title": "walmo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/components/",
	"title": "Components",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/tags/content/",
	"title": "content",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/components/document/",
	"title": "document",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/tags/help/",
	"title": "help",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/components/hugo/",
	"title": "hugo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/site_documentation/",
	"title": "Site Content Info",
	"tags": ["content", "help", "taxonomy"],
	"description": "",
	"content": "Basic help about the site   Our basic taxonomy comes from the Metadata in our \u0026lsquo;Front Matter\u0026rsquo;\nThis page has the following \u0026lsquo;Front Matter\u0026rsquo; taxonomy.\ntags: [\u0026quot;content\u0026quot; , \u0026quot;help\u0026quot; , \u0026quot;taxonomy\u0026quot;] catagories: [\u0026quot;help\u0026quot;] components: [\u0026quot;hugo\u0026quot;] authors: [\u0026quot;walmo\u0026quot;] Our types of taxonomy we are using are based on our configuration file.\nThe contents [\u0026ldquo;content\u0026rdquo; , \u0026ldquo;help\u0026rdquo; , \u0026ldquo;taxonomy\u0026rdquo;] we add when we create our file.\nMore accurate content in our Metadata will help users navigate the documents contained within the site.\n Hugo TOML YAML Mix config.toml uses TOML format:\ntitle = \u0026ldquo;My New Hugo Site\u0026rdquo;\nbut archetypes/default.md uses YAML\ntitle: \u0026ldquo;Test index\u0026rdquo;\nhttps://github.com/gohugoio/hugo/issues/5241\nThe reason is GitHub\u0026rsquo;s support for YAML front matter. Currently they do not support TOML front matter (Metadata).\nSo we are going to use **TOML** for the **config.toml** file then **YAML** for the rest of the contents.  Site Content based on :- Categories\nComponents\nTags\nAuthors\n"
},
{
	"uri": "https://gwtharg.github.io/28mm/tags/taxonomy/",
	"title": "taxonomy",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/authors/cybg/",
	"title": "cybg",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/tags/git/",
	"title": "git",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/categories/paas/",
	"title": "paas",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/components/sdlc/",
	"title": "sdlc",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/git/semanticversionenforcement/",
	"title": "Semantic Version Enforcement",
	"tags": ["git"],
	"description": "",
	"content": "Going forward the commit comment format will be enforced in GitHub, to allow semantic versioning of the builds. This is a basic development discipline to allow control and automation of code delivery.\nThis enforcement will be rolled out sympathetically to all GitHub repositories, so as not to interfere with the in flight releases.\nThis change consists off the format of the commit comments, from which the semantic version is derived and set of scripts to enforce and help with commits.\nCommit Comment Format Development will be done on branches, created from the mainline streams. Currently only have the master mainline stream, but as process matures will have stream for each major semantic version.\nThere will be two types of branches, normal development and hotfix. Normal development will be branched from the head of the mainline stream (master), while hotfix will be branched from a tagged release. All work must be done from a JIRA ticket.\nFor a normal development release the commit comment should be of the format given by the following regex\n^[A-Z]+-[[:digit:]]+ : (MAJOR|MINOR|PATCH) : [[:alnum:]]+\nThe first part if the JIRA ticket id, the second part is the semantic change, the third part is a description of the change. For example\nDYB-12345 : MINOR : An example comment\nNote the spacing around field separator (:), this is to simplify reading, making it consistently formatted.\nThe semantic version part, should should take the value, MAJOR, MINOR or PATCH, all upper case; as explained below\n MAJOR : A change that is backward breaking, currently this isn\u0026rsquo;t supported MINOR : A change that adds new functionality PATCH : A fix for existing functionality  The decision on the semantic version value should be done by the developer, the ticket author and if required the appropriate technical consultant.\nFor a hotfix the commit message should be of the format given by the following regex\n^[A-Z]+-[[:digit:]]+ : HOTFIX : [[:alnum:]]+\nFor example\nDYB-54321 : HOTFIX : Need this fixed now\nThese formats should be applied to all commits, including when merging pull requests. Github isn\u0026rsquo;t helpful here, as it pre-fills the merge commit message, the title of the merge box; this should be edited manually when merging.\nDetermination of Semantic Version The reason for enforcement of the commit comment is to determine the semantic version of the generated artefact.\nFor a normal change, on a mainline stream, the version of the generated artefact will be major.minor.patch for example 3.4.12.\nA build which publishes an artefact will check the last published release, by looking for the the last tag. If none is found it will take a default value. It will then look at all the commit comments since that tag, and look for the highest semantic version value in all the commit comments (MAJOR \u0026gt; MINOR |\u0026gt; PATCH). It will increment the semantic version and tag the code with the new version.\nFor example if the last tag was 3.4.12 and the commit comments since then are\nPE-3567 : PATCH : A bugfix\nPE-3371 : PATCH : Fix logic\nPE-3371 : MINOR : Add new endpoint\nThe highest semantic version value is MINOR, so the semantic version will be incremented to 3.5.0\nSee the document about versioning strategy for a fuller description of this semantic version incrementing.\nFor a hotfix release the semantic version will take the format major.minor.patch-hotfix.buildnumberfor example 3.4.12-hotfix.22.\nWhen the release build is run against a hotfix branch, it will find the last tag, which will be the tag that the hotfix branch was created against. It will take this tag and add the term -hotfix and its build number to the tag and then tag the code with the new tag. The use of the original tag allows multiple hotfix developments, and the use of the build number allows multiple attempts at each of the hot fixes.\nSemantic Version Tools A new directory has been added to the ms-template, called setup, which contains the tools to control semantic versioning. This will also be added to all other template used by auto-mate.\nThe scripts in this directory includes the hooks to enforce the commit patterns and scripts to work out the semantic version from the commit comments. See the README in the directory for more details.\nThere are two script of interest for any development activities.\nThe first is development-setup.sh, this sets up the hooks on the developers local copy of the git project. This is called by default for every build but running\ngradle setupDevelopment\nWill do it without running a build.\nThe second is create-hotfix.sh , this creates the hotfix branch. It requires the release tag of the artefact to be hot fixed as its only argument.\nThe other scripts are described at the end of the README.\n"
},
{
	"uri": "https://gwtharg.github.io/28mm/components/help/",
	"title": "help",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/tags/html/",
	"title": "html",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/tags/openshift/",
	"title": "openshift",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/components/openshift/",
	"title": "openshift",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/tags/docker/",
	"title": "docker",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/tags/document/",
	"title": "document",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/components/git/",
	"title": "git",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/tags/kubernetes/",
	"title": "kubernetes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/tags/markdown/",
	"title": "markdown",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/tags/mermaid/",
	"title": "mermaid",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/tags/shortcodes/",
	"title": "shortcodes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/tfs/team_types/",
	"title": "Team Types",
	"tags": ["TFS", "document"],
	"description": "",
	"content": "Test clip from document Aim of the Document This document is an attempt to guide TFS administrators through the process required to create a more complex hierarchical structure under the VM project folder.\nWe will run through an example using the IIB Technical Team to guide you through the process.\nInitial Considerations Most importantly is that we have had a discussion with the users to understand what it they wish to achieve. If teams require to view the results of queries from other teams \u0026amp; have the ability to show those on a common dashboard then this may be a reason to create a more complex structure. If the user just requires to be a member of many teams then this is not a valid reason to create a more complex structure.\nNote \u0026ndash; rights to view work/code/queries will be inherited with this model. So any team on a lower level must consent to this before creating any complex structure.\n"
},
{
	"uri": "https://gwtharg.github.io/28mm/tags/tfs/",
	"title": "TFS",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/components/tfs/",
	"title": "TFS",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gwtharg.github.io/28mm/categories/help/",
	"title": "help",
	"tags": [],
	"description": "",
	"content": ""
}]