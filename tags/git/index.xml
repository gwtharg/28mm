<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on Walmo SDLC Test</title>
    <link>https://gwtharg.github.io/28mm/tags/git/</link>
    <description>Recent content in git on Walmo SDLC Test</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Mon, 04 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://gwtharg.github.io/28mm/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Components  OP</title>
      <link>https://gwtharg.github.io/28mm/paas/components_for_op/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gwtharg.github.io/28mm/paas/components_for_op/</guid>
      <description>Components for Operational Platform We are assuming that training delegates have prior knowledge of the following:
 Continuous Delivery  Jenkins  Nexus Repostory Manager  Postman  GitHub  GOCD  Continuous Integration  Gradle  Devops Mindset       Component Name Functionality Description Key Points Comments     Componet GitHub Repo Scource Code Management Source code of the component needs to be kept in GitHub with all its contents.</description>
    </item>
    
    <item>
      <title>Caboodle</title>
      <link>https://gwtharg.github.io/28mm/paas/caboodle_intro/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gwtharg.github.io/28mm/paas/caboodle_intro/</guid>
      <description>Using a Repository Manager A repository manager is a dedicated server application designed to manage repositories of binary components. The usage of a repository manager is considered an essential best practice for any significant usage.
Purpose A repository manager serves these essential purposes:
 act as dedicated proxy server for public repositories provide repositories as a deployment destination for your project outputs  Benefits and Features Using a repository manager provides the following benefits and features:</description>
    </item>
    
    <item>
      <title>Versioning Strategy</title>
      <link>https://gwtharg.github.io/28mm/git/version_strategy/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gwtharg.github.io/28mm/git/version_strategy/</guid>
      <description>The document describes the versioning strategy for deliverable componenets.
While we will be using semantic versioning and each release will be tagged with its semantic version, only major versions of each component will be supported in production.
So for each major version in production we will have a named branch. What we mean by &amp;lsquo;named branch&amp;rsquo; is a branch this is long lived, has forked of master and it will trigger a pipeline release on checkin.</description>
    </item>
    
    <item>
      <title>Branching and Merging Strategy</title>
      <link>https://gwtharg.github.io/28mm/git/branchingstrategy/</link>
      <pubDate>Tue, 07 Apr 2020 13:07:35 +0100</pubDate>
      
      <guid>https://gwtharg.github.io/28mm/git/branchingstrategy/</guid>
      <description>Most development is done on the internal Github but some code is shared with the external Bitbucket. In order to support this we have the same repo pushed to both GitHub and BitBucket.
It is best to consider GitHub and BitBucket as simply copies of the same git repository. There is no merging between GitHub and BitBucket, merging is done at the branch level and the same commit history is pushed to both systems.</description>
    </item>
    
    <item>
      <title>GIT Info</title>
      <link>https://gwtharg.github.io/28mm/git/</link>
      <pubDate>Tue, 07 Apr 2020 13:04:31 +0100</pubDate>
      
      <guid>https://gwtharg.github.io/28mm/git/</guid>
      <description>Git Information Based on notes from old V: Drive from hVM
  GIT Tagged files   Versioning Strategy   Branching and Merging Strategy   Semantic Version Enforcement   </description>
    </item>
    
    <item>
      <title>Semantic Version Enforcement</title>
      <link>https://gwtharg.github.io/28mm/git/semanticversionenforcement/</link>
      <pubDate>Mon, 20 Apr 2020 10:50:16 +0100</pubDate>
      
      <guid>https://gwtharg.github.io/28mm/git/semanticversionenforcement/</guid>
      <description>Going forward the commit comment format will be enforced in GitHub, to allow semantic versioning of the builds. This is a basic development discipline to allow control and automation of code delivery.
This enforcement will be rolled out sympathetically to all GitHub repositories, so as not to interfere with the in flight releases.
This change consists off the format of the commit comments, from which the semantic version is derived and set of scripts to enforce and help with commits.</description>
    </item>
    
  </channel>
</rss>